#!/bin/bash

# check_for checks if the given regex is present in the staged files
function check_for {
    if [ $? -ne 0 ]; then
        exit 1
    fi

    # the error message is the last argument
    ERROR_MESSAGE=${@: -1}

    # CONDITION is an or of all arguments except the last one, in lines that
    # starts with + (added lines)
    # concatenate all arguments except the last one with | in between
    CONDITION=$(echo "${@:1:$(($#-1))}" | sed 's/ /\\|/g')

    if [ "$(git diff --staged -U0 | grep -c "$CONDITION")" -gt 0 ]; then
        echo "You have $ERROR_MESSAGE in your commit"
        exit 1
    fi
}

check_for "F\(It\|Describe\|Context\)" "focus tests"
check_for "X\(It\|Describe\|Context\)" "excluded tests"
check_for "//\s*TODO:" "TODOs"
check_for "Print\(ln\|f\)\?" "print statements"

# check inside go.mod for "replace url => path" entries
if [ $(git diff --staged go.mod | grep -c "replace") -gt 0 ]; then
    echo "You have replace entries in your go.mod"
    exit 1
fi

# Get full path to the directory containing this script
SCRIPT_DIR=$(dirname $(readlink -f $0))

# Get all go files changed since last commit, ignoring deleted files
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=d -- '*.go')

for file in $STAGED_GO_FILES; do
    # run revive linter
    revive -formatter stylish -config $SCRIPT_DIR/../assets/revive.toml $file
    LINTER_EXIT_CODE=$?
    if [ $LINTER_EXIT_CODE -ne 0 ]; then
        echo "Linter failed on file: $file"
        exit $LINTER_EXIT_CODE
    fi

    # format the file and add it back to the commit
    gofumpt -w $file
    git add $file
done

# Run local pre-commit hook after this if this is not a symlink
if [ ! -L $0 ]; then
    $SCRIPT_DIR/scripts/run-local-hook.sh $(basename $0)
fi
